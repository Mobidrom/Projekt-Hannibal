name: "SEVAS Konversion"

on:
  workflow_dispatch:
    inputs:
      osm_url:
        description: "URL zu einer OSM PBF Datei, z. B. http://download.geofabrik.de/europe/germany/nordrhein-westfalen-latest.osm.pbf"
        required: true
        default: "http://download.geofabrik.de/europe/germany/nordrhein-westfalen-latest.osm.pbf"
      sevas_url:
        description: "URL zum SEVAS WFS Client"
        required: true
        default: "https://sevas.nrw.de/osm/sevas"
      clean_tags:
        description: "Durch Leerzeichen separierte tags, die innerhalb der in 'clean_area' angegebenen Fläche von allen Objekten entfernt werden"
        required: false
        default: ""
      clean_area:
        description: "OSM ID einer Relation, die eine Fläche darstellt. Wenn angegeben, werden innerhalb dieser Fläche alle Tags mit in 'clean_tags' angegebenen Keys entfernt"
        required: false
        default: "-1"
      file_name:
        description: "Name der finalen OSM PBF Datei (ohne Endung)"
        required: false
        default: "sevas"

jobs:
  convert:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python_version: ["3.12"]
    steps:
      - uses: actions/checkout@v3

      - name: Obtain OSM file checksum
        id: obtain_checksum
        run: |
          CHECKSUM_URL=${{ inputs.osm_url }}.md5
          if [[ $(curl -fs $CHECKSUM_URL) ]]; then
            echo "checksum=$(curl -s $CHECKSUM_URL | awk '{print $1"-"$2}')" >> $GITHUB_OUTPUT
          fi

      - uses: actions/cache@v3
        name: Cache OSM File
        id: cache-osm-file
        with:
          path: ~/.osm_source
          key: osm-checksum-${{ steps.obtain_checksum.outputs.checksum }}

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: pip

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - uses: actions/cache@v4
        with:
          name: Cache virtual env
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Download OSM File
        if: steps.cache-osm-file.outputs.cache-hit != 'true'
        run: |
          mkdir ~/.osm_source
          echo ${{ inputs.osm_url }}
          curl -sfo ~/.osm_source/source.pbf ${{ inputs.osm_url }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Install Osmium
        run: |
          sudo apt update --yes
          sudo apt install --yes --quiet osmium-tool

      - name: SEVAS Konversion
        run: |
          source .venv/bin/activate
          mkdir sevas_data

          sevas_utils download sevas_data ${{ inputs.sevas_url }} 
          sevas_utils convert sevas_data ~/.osm_source/source.pbf ${{ inputs.file_name }}.pbf --clean-tags "${{ inputs.clean_tags }}"  --clean-area "${{ inputs.clean_area }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archiviere konvertierte OSM Datei
        uses: actions/upload-artifact@v4
        with:
          name: sevas-osm
          path: ${{ inputs.file_name }}.pbf
